<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <!--  将自己写的拦截器配置到springmvc中(spring);    (preHandle-return false)默认拦截全部请求  -->
    <mvc:interceptors>
<!--        <bean id="MyInterceptor" class="org.legend.interceptor.MyInterceptor"/>-->
        <!--           配置具体的拦截路径     -->
        <mvc:interceptor>
            <!--   指定拦截的路径，基于ant风格         -->
            <mvc:mapping path="/**"/>
            <!--     指定不拦截的路径         -->
            <mvc:exclude-mapping path="/handler/testUpload"/>
            <bean class="org.legend.interceptor.MyInterceptor"></bean>
        </mvc:interceptor>
        <mvc:interceptor>
            <!--   指定拦截的路径，基于ant风格         -->
            <mvc:mapping path="/**"/>
            <!--     指定不拦截的路径         -->
            <mvc:exclude-mapping path="/handler/testUpload"/>
            <bean class="org.legend.interceptor.MySecondInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- bean扫描器(扫描有注释类的包) -->
    <context:component-scan base-package="org.legend.*"></context:component-scan>

    <!--  配置解析器  -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--  无需@RequestMapping拦截  -->
    <mvc:view-controller path="MvcViewController/handler/testMvcViewController" view-name="success"/>
    <!--    此配置时springmvc的基础配置，很多功能都需要通过该注解来协调;不然之前的@RequestMapping会失效    -->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!-- 该注解 会让 springmvc： 接收一个请求，并且该请求 没有对应的@requestmapping时，将该请求 交给服务器默认的servlet去处理（直接访问）  -->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>

    <!-- 1.将 自定义转换器 纳入SpringIOC容器 -->
    <bean  id="myConverter" class="org.legend.converter.MyConverter"></bean>
    <!-- 2.将myConverter再纳入 SpringMVC提供的转换器Bean  -->
    <!--    <bean id="conversionService"  class="org.springframework.context.support.ConversionServiceFactoryBean">-->
    <!--        <property name="converters">-->
    <!--            <set>-->
    <!--                <ref bean="myConverter"/>-->
    <!--            </set>-->
    <!--        </property>-->
    <!--    </bean>-->
    <!-- 3.将conversionService注册到annotation-driven中 -->
    <!--此配置是SpringMVC的基础配置，很功能都需要通过该注解来协调  -->
    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

    <!--    -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="myConverter"/>
            </set>
        </property>
    </bean>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 上传单个文件的最大值，单位Byte;如果-1，表示无限制 -->
        <property name="maxUploadSize" value="204800"/>
        <!--   文件上传时最大允许内存      -->
<!--        <property name="maxInMemorySize" value="2048"/>-->
    </bean>

</beans>
